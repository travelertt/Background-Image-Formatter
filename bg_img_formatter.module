<?php
/**
 * @file
 * Adds a formatter for image fields that places the image inside an
 * CSS class background property.
 */

/**
 * Implements hook_field_formatter_info().
 */
function bg_img_formatter_field_formatter_info() {
  return array(
    'image_bg_img' => array(
      'label' => t('Background Image'),
      'field types' => array('image'),
      'settings'  => array( 
        'bg_class' => '',
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bg_img_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element['bg_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Class'),
    '#default_value' => $settings['bg_class'],
    '#required' => TRUE,
    //'#element_validate' => array(''),
    '#description' => t('CSS class rule name that will be created. Must follow CSS class name rules. @todo add link to w3c.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function bg_img_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('A CSS class .@bg_class will be created with the image set as the background-image property."', array(
    '@bg_class'     => $settings['bg_class'],
  ));

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function bg_img_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
  /*
   *case 'sample_field_formatter_simple':
   *  // Common case: each value is displayed individually in a sub-element
   *  // keyed by delta. The field.tpl.php template specifies the markup
   *  // wrapping each value.
   *  foreach ($items as $delta => $item) {
   *    $element[$delta] = array('#markup' => $settings['some_setting'] . $item['value']);
   *  }
   *  break;
   *
   *case 'sample_field_formatter_themeable':
   *  // More elaborate formatters can defer to a theme function for easier
   *  // customization.
   *  foreach ($items as $delta => $item) {
   *    $element[$delta] = array(
   *      '#theme' => 'mymodule_theme_sample_field_formatter_themeable',
   *      '#data' => $item['value'],
   *      '#some_setting' => $settings['some_setting'],
   *    );
   *  }
   *  break;
   *
   *case 'sample_field_formatter_combined':
   *  // Some formatters might need to display all values within a single piece
   *  // of markup.
   *  $rows = array();
   *  foreach ($items as $delta => $item) {
   *    $rows[] = array($delta, $item['value']);
   *  }
   *  $element[0] = array(
   *    '#theme' => 'table',
   *    '#header' => array(t('Delta'), t('Value')),
   *    '#rows' => $rows,
   *  );
   *  break;
   */
    case 'image_bg_img':
      foreach ($items as $delta => $item) {
        dpm($item);
        $images[$delta] = array(
          'path' = $item['value'];  
        );
      }
      theme_bg_img($settings['bg_class'], $images);
      break;
  }

  // No markup is sent to element, because it is being sent to drupal_add_css
  return $element;
}

/**
 * Implements hook_theme().
 */
function bg_img_formatter_theme($existing, $type, $theme, $path) {
  return array(
    /*
     *'forum_icon' => array(
     *  'variables' => array('new_posts' => NULL, 'num_posts' => 0, 'comment_mode' => 0, 'sticky' => 0),
     *),
     *'status_report' => array(
     *  'render element' => 'requirements',
     *  'file' => 'system.admin.inc',
     *),
     */
    'bg_img' => array(
      'variables' => array('bg_class' => NULL, 'images' => NULL),
    ),
  );
}

function theme_bg_img($variables) {
  extract($variables);
  $css  = '';
  $urls = '';

  foreach ($images as $delta => $img) {
      $urls .= 'url(\'' . $img . '\')';
  }
  $urls = implode(', ', $urls);

  $css .= '.' . $bg_class . '{background-image: ' . $urls . ';}';
  drupal_add_css( $css, $option['type'] = 'inline');

}
