<?php
/**
 * @file
 * Adds a formatter for image fields that places the image inside an
 * CSS class background property.
 *
 * @todo Help page
 * @todo Config page for defaults?
 * @todo Remove form label? etc.?
 * @todo Seperate file for theme.inc?
 */

/**
 * Implements hook_field_formatter_info().
 */
function bg_img_formatter_field_formatter_info() {
  return array(
    'image_bg_img' => array(
      'label' => t('Background Image'),
      'field types' => array('image'),
      'settings'  => array( 
        'bg_selector' => '',
      )
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bg_img_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element['bg_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS Selector'),
    '#default_value' => $settings['bg_selector'],
    '#required' => TRUE,
    '#element_validate' => array('check_plain'),
    '#description' => t('CSS selector name that will be created, with the image(s) attached.  <a href="http://www.w3.org/TR/CSS2/selector.html">W3C Selectors</a>'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function bg_img_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('The CSS selector <code>@bg_selector</code> will be created with the image set to the background-image property.', array(
    '@bg_selector' => $settings['bg_selector'],
  ));

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function bg_img_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'image_bg_img':
      if(!$items) {
        drupal_set_message(t('NO Images found. You must add an image.'), 'error');
        break;
      }
      foreach ($items as $delta => $item) {
        $images[$delta] = $item;
      }
      theme('bg_img', array( 'bg_selector' => $settings['bg_selector'], 'images' => $items));
    break;
  }

  // No markup is sent to element, because it is being sent to drupal_add_css
  return $element;
}

/**
 * Implements hook_theme().
 */
function bg_img_formatter_theme($existing, $type, $theme, $path) {
  return array(
    'bg_img' => array(
      'variables' => array('bg_selector' => NULL, 'images' => NULL),
    ),
  );
}

/**
 * Theme function Background Image
 * @param  array $variables two arrays values: bg_selector, field items array
 * @return NULL            No return
 */
function theme_bg_img($variables) {
  extract($variables);
  $css  = '';
  $urls = array();
  $bg_selector = filter_xss($bg_selector);
  // Allow '>' in string
  $bg_selector = str_ireplace('&lt;', '>', $bg_selector);

  foreach ($images as $delta => $item) {
    $src = file_create_url($item['uri']);
    $urls[] = 'url(\'' . $src . '\')';
  }
  $urls = implode(', ', $urls);
  
  $css .= $bg_selector . '{background-image: ' . $urls . ';}';
  drupal_add_css( $css, $option['type'] = 'inline');

  // No Markup returned.
}
